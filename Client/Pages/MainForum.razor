@page "/forum"
@using Microsoft.AspNetCore.WebUtilities
@implements IDisposable
@inject NavigationManager NavManager
@inject ApiAuthenticationStateProvider AuthProvider
@inject HttpClient HttpClient


<div class="row no-gutters h-100">
    <div class="col-6">
        @if (hubId > 0 && hub != null)
        {
            <h3>@hub.Name</h3>
            <hr />

            <ul class="threads nav flex-column">

                @foreach (var thread in threads)
                {
                    <li class="nav-item mb-3">
                        <NavLink class="card nav-link" href='@string.Format("forum?hubId={0}&threadId={1}", hubId, thread.Id)'>
                            <div class="card-body">
                                <h5 class="card-title text-left font-weight-bold">
                                    @thread.Name
                                </h5>
                                <div class="card-text text-left font-weight-light">
                                    by @thread.UserName &nbsp;
                                    <strong class="font-weight-bold">&#183;</strong> &nbsp;
                                    @thread.ReplyCount Replies &nbsp;
                                    <strong class="font-weight-bold">&#183;</strong> &nbsp;
                                    Last Reply: @thread.DateModified
                                </div>
                            </div>
                        </NavLink>
                    </li>
                }

            </ul>
        }
        else
        {
            <div class="d-flex h-100 justify-content-center align-items-center">
                Select a hub on the left
            </div>
        }
    </div>
</div>

@code {
    private int hubId { get; set; }
    private int threadId { get; set; }
    private int postId { get; set; }

    private async void OnLocationChanged(object sender, LocationChangedEventArgs e) => await RefreshParams();

    private HubModel hub;
    private List<ThreadModel> threads;
    private ThreadModel thread;
    private List<PostModel> posts;

    protected override async Task OnInitializedAsync()
    {
        NavManager.LocationChanged += OnLocationChanged;

        await RefreshParams();
    }

    private async Task RefreshParams()
    {
        hub = null;
        threads = new List<ThreadModel>();

        var uri = new Uri(NavManager.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);

        hubId = query.TryGetValue("hubId", out var hubStr) ? (int.TryParse(hubStr.First(), out int hubInt) ? hubInt : -1) : -1;
        threadId = query.TryGetValue("threadId", out var threadStr) ? (int.TryParse(threadStr.First(), out int threadInt) ? threadInt : -1) : -1;
        postId = query.TryGetValue("postId", out var postStr) ? (int.TryParse(postStr.First(), out int postInt) ? postInt : -1) : -1;

        if (hubId > 0)
        {
            var result = await HttpClient.GetJsonAsync<GenericGetResult<HubModel>>($"api/forum/hub/{hubId}");
            if (result.Succeeded)
                hub = result.Value;
        }

        if (hub != null)
        {
            var result = await HttpClient.GetJsonAsync<GenericGetResult<List<ThreadModel>>>($"api/forum/threads/{hub.Id}");
            if (result.Succeeded)
                threads = result.Value;
        }

        if (threadId > 0)
        {
            var result = await HttpClient.GetJsonAsync<GenericGetResult<ThreadModel>>($"api/forum/thread/{threadId}");
            if (result.Succeeded)
                thread = result.Value;
        }

        if (thread != null)
        {
            var result = await HttpClient.GetJsonAsync<GenericGetResult<List<PostModel>>>($"api/forum/posts/{thread.Id}");
            if (result.Succeeded)
                posts = result.Value;
        }

        StateHasChanged();
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= OnLocationChanged;
    }
}
