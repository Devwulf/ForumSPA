@page "/forum"
@using Microsoft.AspNetCore.WebUtilities
@using System.Security.Claims 
@using System.ComponentModel.DataAnnotations
@using Blazored.Localisation.Services 
@implements IDisposable
@inject NavigationManager NavManager
@inject ForumClientService ForumService
@inject IJSRuntime JSRuntime 
@inject BrowserDateTimeProvider DateTimeProvider

<div class="row no-gutters h-100">
    <div class="col-6 p-5 overflow-scroll h-100 scroller">
        @if (hubId > 0 && hub != null)
        {
            <!-- For now, as long as logged in, can create threads in any hub -->
            <AuthorizeView Context="authContext">
                <Authorized>
                    <div class="row no-gutters mb-3">
                        <h3 class="col-6">@hub.Name</h3>
                        <div class="col-6 d-flex justify-content-end">
                            <button class="btn btn-success" type="button" data-toggle="modal" data-target="#newThreadModal">
                                <i class="fas fa-plus"></i>
                                New Thread
                            </button>

                            <!-- New Thread Modal, not usually shown -->
                            <div id="newThreadModal" class="modal fade" tabindex="-1">
                                <div class="modal-dialog modal-lg">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h4 class="modal-title">Create New Thread</h4>
                                            <button type="button" class="close" data-dismiss="modal">
                                                <span>&times;</span>
                                            </button>
                                        </div>

                                        <EditForm Model="threadModel" OnValidSubmit="HandleCreateThread">
                                            <DataAnnotationsValidator />

                                            <div class="modal-body">
                                                <div class="form-group">
                                                    <label for="titleInput">Title</label>
                                                    <InputText id="titleInput" class="form-control" @bind-Value="threadModel.Name" placeholder="Enter title..." />
                                                    <ValidationMessage For="@(() => threadModel.Name)" />
                                                </div>
                                                <div class="form-group">
                                                    <label for="bodyInput">Body</label>
                                                    <InputRichText Id="bodyInput" @bind-Value="threadModel.Body" />
                                                    <ValidationMessage For="@(() => threadModel.Body)" />
                                                </div>
                                            </div>

                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                                <button type="submit" class="btn btn-primary">Create Thread</button>
                                            </div>
                                        </EditForm>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <h3>@hub.Name</h3>
                </NotAuthorized>
            </AuthorizeView>

            <EditForm Model="searchModel" OnValidSubmit="HandleSearch">
                <DataAnnotationsValidator />

                <div class="input-group">
                    <InputText class="form-control" @bind-Value="searchModel.SearchString" placeholder="Search..." />
                    <div class="input-group-append">
                        <button class="btn btn-primary" type="submit">Search</button>
                    </div>
                    <ValidationMessage For="@(() => searchModel.SearchString)" />
                </div>
            </EditForm>
            <hr />

            <ul class="threads nav flex-column">

                @foreach (var thread in threads)
                {
                    <li class="nav-item mb-3">
                        <NavLink class="card nav-link" href='@string.Format("forum?hubId={0}&threadId={1}", hub.Id, thread.Id)'>
                            <div class="card-body">
                                <h5 class="card-title text-left font-weight-bold">
                                    @thread.Name
                                </h5>
                                <div class="card-text text-left font-weight-light">
                                    by @thread.UserName &nbsp;
                                    <strong class="font-weight-bold">&#183;</strong> &nbsp;
                                    @Replies(thread.ReplyCount) &nbsp;
                                    <strong class="font-weight-bold">&#183;</strong> &nbsp;
                                    Last Reply: @DateHelper.ToTimeSpan(thread.DateModified, dateTime.Now)
                                </div>
                            </div>
                        </NavLink>
                    </li>
                }

            </ul>
        }
        else
        {
            <div class="d-flex h-100 justify-content-center align-items-center">
                Select a hub on the left
            </div>
        }
    </div>
    <div class="col-6 p-5 overflow-scroll h-100 scroller">
        @if (threadId > 0 && thread != null)
        {
            <AuthorizeView Context="threadAuthContext" Policy="IsThreadOwner" Resource="thread">
                <Authorized>
                    <div class="mb-3">
                        @if (isEditingThread)
                        {
                            <EditForm Model="editThreadModel" OnValidSubmit="() => HandleSaveEditThread(thread.Id)">
                                <DataAnnotationsValidator />

                                <div class="mb-3">
                                    <InputText class="form-control" @bind-Value="editThreadModel.Title" />
                                    <ValidationMessage For="@(() => editThreadModel.Title)" />
                                </div>

                                <div class="row no-gutters">
                                    <button class="btn btn-success col-2 mr-3" type="submit">
                                        <i class="fas fa-check"></i>
                                        Save
                                    </button>
                                    <button class="btn btn-secondary col-2" type="button" @onclick="HandleCancelEditThread">
                                        <i class="fas fa-times"></i>
                                        Cancel
                                    </button>
                                </div>
                            </EditForm>
                        }
                        else
                        {
                            <h3 class="mb-3">@thread.Name</h3>
                            <div class="row no-gutters">
                                <button class="btn btn-primary col-2 mr-3" type="button" @onclick="() => HandleEditThread(thread.Name)">
                                    <i class="fa fa-edit"></i>
                                    Edit
                                </button>
                                <button class="btn btn-danger col-2" type="button" data-toggle="modal" data-target="#deleteThreadModal">
                                    <i class="fas fa-times"></i>
                                    Delete
                                </button>

                                <!-- Delete Thread modal -->
                                <div id="deleteThreadModal" class="modal fade" tabindex="-1">
                                    <div class="modal-dialog">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h4 class="modal-title">Delete Thread</h4>
                                                <button type="button" class="close" data-dismiss="modal">
                                                    <span>&times;</span>
                                                </button>
                                            </div>

                                            <div class="modal-body">
                                                Are you sure you want to delete '@thread.Name'?
                                            </div>

                                            <div class="modal-footer">
                                                <button class="btn btn-secondary" type="button" data-dismiss="modal">Cancel</button>
                                                <button class="btn btn-danger" type="button" @onclick="() => HandleDeleteThread(thread.Id)">
                                                    <i class="fas fa-times"></i>
                                                    Delete
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    

                </Authorized>
                <NotAuthorized>
                    <h3>@thread.Name</h3>
                </NotAuthorized>
            </AuthorizeView>
            <hr />

            @foreach (var post in posts)
            {
                <div class="post py-4">
                    <div class="row no-gutters mb-4" style="color: #0d1138;">
                        <img class="mr-3" src="http://getdrawings.com/free-icon/icon-50x50-55.png" height="50" width="50" />
                        <div class="col-6">
                            @if (post.IsMainPost)
                            {
                                <div>Started by <a class="user-link font-weight-bold" href="/">@post.UserName</a></div>
                            }
                            else
                            {
                                <a class="user-link font-weight-bold" href="/">@post.UserName</a>
                            }
                            <div>on <strong>@DateHelper.ToTimeSpan(post.DateCreated, dateTime.Now)</strong></div>
                        </div>
                    </div>

                    <div class="ck-content mb-3">
                        @((MarkupString)post.Body)
                    </div>

                    <div class="row no-gutters mb-4 text-center">
                        <a class="post-options py-2 col-2" href="/">
                            <i class="fas fa-reply"></i>
                            Reply
                        </a>
                        <a class="post-options py-2 col-2" href="/">
                            <i class="fas fa-quote-right"></i>
                            Quote
                        </a>
                        <a class="post-options py-2 col-2" href="/">
                            <i class="fas fa-exclamation-circle"></i>
                            Report
                        </a>
                    </div>
                    <hr />
                </div>
            }
        }
        else
        {
            <div class="d-flex h-100 justify-content-center align-items-center">
                Select a thread on the left
            </div>
        }
    </div>
</div>

@code {
    public class SearchModel
    {
        [Required]
        public string SearchString { get; set; }
    }

    public class EditThreadModel
    {
        [Required]
        [StringLength(300, MinimumLength = 6, ErrorMessage = "The {0} must be at least {2} and at most {1} characters long.")]
        public string Title { get; set; }
    }

    [CascadingParameter]
    private Task<AuthenticationState> authStateTask { get; set; }

    private int hubId { get; set; }
    private int threadId { get; set; }
    private int postId { get; set; }
    private string threadSearch { get; set; }
    private bool isEditingThread { get; set; }

    private async void OnLocationChanged(object sender, LocationChangedEventArgs e) => await RefreshParams();

    private HubModel hub;
    private List<ThreadModel> threads;
    private ThreadModel thread;
    private List<PostModel> posts;

    private SearchModel searchModel = new SearchModel();
    private ThreadModel threadModel = new ThreadModel();
    private EditThreadModel editThreadModel = new EditThreadModel();

    private BrowserDateTime dateTime;

    protected override async Task OnInitializedAsync()
    {
        dateTime = await DateTimeProvider.GetInstance();

        NavManager.LocationChanged += OnLocationChanged;
        await RefreshParams();
    }

    private async Task RefreshParams()
    {
        hub = null;
        thread = null;
        threads = new List<ThreadModel>();
        posts = new List<PostModel>();
        isEditingThread = false;

        var uri = new Uri(NavManager.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);

        hubId = query.TryGetValue("hubId", out var hubStr) ? (int.TryParse(hubStr.First(), out int hubInt) ? hubInt : -1) : -1;
        threadId = query.TryGetValue("threadId", out var threadStr) ? (int.TryParse(threadStr.First(), out int threadInt) ? threadInt : -1) : -1;
        postId = query.TryGetValue("postId", out var postStr) ? (int.TryParse(postStr.First(), out int postInt) ? postInt : -1) : -1;
        threadSearch = query.TryGetValue("threadSearch", out var searchStr) ? searchStr.ToString() : null;

        if (hubId > 0)
        {
            var result = await ForumService.GetHub(hubId);
            if (result.Succeeded)
                hub = result.Value;
        }

        if (hub != null)
        {
            var result = await ForumService.GetThreads(hub.Id);
            if (result.Succeeded)
                threads = result.Value;
        }

        if (threadId > 0)
        {
            var result = await ForumService.GetThread(threadId);
            if (result.Succeeded)
                thread = result.Value;
        }

        if (thread != null)
        {
            var result = await ForumService.GetPosts(thread.Id);
            if (result.Succeeded)
                posts = result.Value;
        }

        if (hub != null && !threadSearch.IsNullOrWhiteSpace())
        {
            searchModel.SearchString = threadSearch;
            threads = (from t in threads
                       where t.Name.Contains(threadSearch, StringComparison.OrdinalIgnoreCase)
                       select t).ToList();
        }

        StateHasChanged();
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= OnLocationChanged;
    }

    private async Task HandleCreateThread()
    {
        var authState = await authStateTask;
        var userId = authState.User.Claims.FirstOrDefault(claim => claim.Type.Equals(ClaimTypes.NameIdentifier))?.Value;
        if (userId.IsNullOrWhiteSpace())
            return;

        var thread = new ThreadModel()
        {
            Name = threadModel.Name,
            Body = threadModel.Body,
            HubId = hub.Id,
            UserId = userId
        };

        var result = await ForumService.CreateThread(thread);
        if (!result.Succeeded)
            return; // Show a toast (yeah I know, it's such a stupid name) about the error

        await JSRuntime.InvokeVoidAsync("helperFunctions.closeModal", "#newThreadModal");
        await RefreshParams();
    }

    private async Task HandleDeleteThread(int threadId)
    {
        var result = await ForumService.DeleteThread(threadId);
        if (!result.Succeeded)
            return;

        await JSRuntime.InvokeVoidAsync("helperFunctions.closeModal", "#deleteThreadModal");
        await RefreshParams();
    }

    private void HandleEditThread(string title)
    {
        isEditingThread = true;
        editThreadModel.Title = title;
    }

    private async Task HandleSaveEditThread(int threadId)
    {
        var threadModel = new ThreadEditModel()
        {
            Id = threadId,
            Name = editThreadModel.Title
        };

        var result = await ForumService.UpdateThread(threadModel);
        if (!result.Succeeded)
            return;

        isEditingThread = false;
        await RefreshParams();
    }

    public void HandleCancelEditThread()
    {
        isEditingThread = false;
    }

    private void HandleSearch()
    {
        if (searchModel != null && !searchModel.SearchString.IsNullOrWhiteSpace())
        {
            var uri = new Uri(NavManager.Uri);
            var query = QueryHelpers.ParseQuery(uri.Query)
                                    .ToDictionary(pair => pair.Key, pair => pair.Value.ToString());

            if (query.ContainsKey("threadSearch"))
                query["threadSearch"] = searchModel.SearchString;
            else
                query.Add("threadSearch", searchModel.SearchString);

            var url = QueryHelpers.AddQueryString(NavManager.BaseUri + "forum", query);
            NavManager.NavigateTo(url);
        }
    }

    private string Replies(int replies)
    {
        if (replies == 1)
            return "1 Reply";

        return $"{replies} Replies";
    }
}
