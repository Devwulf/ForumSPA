@page "/login"
@inject IAuthService AuthService
@inject NavigationManager NavManager

<h2>Login</h2>
<hr />

@if (_showErrors)
{
    <div class="card alert alert-danger no-padding" role="alert">
        <div class="card-body">
            @_error
        </div>
    </div>
}

<EditForm Model="LoginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />

    <div class="form-group">
        <Label TModel="LoginModel" For="usernameInput" PropertyName="@nameof(LoginModel.Username)"></Label>
        <InputText Id="usernameInput" class="form-control" @bind-Value="LoginModel.Username" />
        <ValidationMessage For="@(() => LoginModel.Username)" />
    </div>
    <div class="form-group">
        <Label TModel="LoginModel" For="passwordInput" PropertyName="@nameof(LoginModel.Password)"></Label>
        <InputText Id="passwordInput" class="form-control" type="password" @bind-Value="LoginModel.Password" />
        <ValidationMessage For="@(() => LoginModel.Password)" />
    </div>
    <div class="form-check">
        <InputCheckbox Id="rememberMe" class="form-check-input" @bind-Value="LoginModel.RememberMe" />
        <Label TModel="LoginModel" For="rememberMe" PropertyName="@nameof(LoginModel.RememberMe)"></Label>
    </div>

    <button class="btn btn-primary" type="submit">Login</button>
</EditForm>

@code {
    private LoginModel LoginModel = new LoginModel();
    private bool _showErrors;
    private string _error = "";

    private async Task HandleLogin()
    {
        _showErrors = false;
        var result = await AuthService.Login(LoginModel);

        if (result.Succeeded)
        {
            // No need to forceLoad, just add listener to NotifyStateChange event 
            // in AuthService for components that needed to be updated after login
            NavManager.NavigateTo("/");
        }
        else
        {
            _error = result.Error;
            _showErrors = true;
        }
    }
}
