@inherits InputTextArea
@implements IDisposable
@inject IJSRuntime JSRuntime

<textarea @attributes="AdditionalAttributes"
          id="@Id"
          class="@CssClass"
          value="@CurrentValue"></textarea>

@code {
    string _id;
    [Parameter]
    public string Id
    {
        get => _id ?? $"CKEditor_{uid}";
        set => _id = value;
    }

    readonly string uid = Guid.NewGuid().ToString().ToLower().Replace("-", "");

    protected override void OnInitialized()
    {
        /*
        PostEditService.OnPostChange += EditorSetValue;
        PostEditService.OnCancel += EditorClearValue;
        /**/
    }

    public void Dispose()
    {
        /*
        PostEditService.OnPostChange -= EditorSetValue;
        PostEditService.OnCancel -= EditorClearValue;
        /**/
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JSRuntime.InvokeVoidAsync("CKEditorInterop.init", Id, DotNetObjectReference.Create(this));

        await base.OnAfterRenderAsync(firstRender);
    }

    [JSInvokable]
    public Task EditorDataChanged(string data)
    {
        CurrentValue = data;
        StateHasChanged();
        return Task.CompletedTask;
    }

    public async Task EditorSetValue(string data)
    {
        await JSRuntime.InvokeVoidAsync("CKEditorInterop.setValue", Id, data);
    }

    public async Task EditorClearValue()
    {
        await JSRuntime.InvokeVoidAsync("CKEditorInterop.clearValue", Id);
    }

    protected override void Dispose(bool disposing)
    {
        JSRuntime.InvokeVoidAsync("CKEditorInterop.destroy", Id);
        base.Dispose(disposing);
    }
}